
 fs/aufs/Kconfig          |    2 +-
 fs/dcache.c              |    1 +
 fs/exec.c                |    1 +
 fs/fcntl.c               |    1 +
 fs/file_table.c          |    4 ++++
 fs/inode.c               |    1 +
 fs/namespace.c           |    2 ++
 fs/notify/group.c        |    4 ++++
 fs/notify/mark.c         |    4 ++++
 fs/open.c                |    2 ++
 fs/read_write.c          |    2 ++
 fs/splice.c              |    2 ++
 fs/xattr.c               |    1 +
 kernel/task_work.c       |    1 +
 security/commoncap.c     |    2 ++
 security/device_cgroup.c |    2 ++
 security/security.c      |   10 ++++++++++
 17 files changed, 41 insertions(+), 1 deletion(-)

diff -Nurp linux-4.7-rc6-aufs/fs/aufs/Kconfig linux-4.7-rc6-aufs-mod/fs/aufs/Kconfig
--- linux-4.7-rc6-aufs/fs/aufs/Kconfig	2016-07-04 19:02:29.246286120 +0300
+++ linux-4.7-rc6-aufs-mod/fs/aufs/Kconfig	2016-07-04 19:03:53.653714965 +0300
@@ -1,5 +1,5 @@
 config AUFS_FS
-	bool "Aufs (Advanced multi layered unification filesystem) support"
+	tristate "Aufs (Advanced multi layered unification filesystem) support"
 	help
 	Aufs is a stackable unification filesystem such as Unionfs,
 	which unifies several directories and provides a merged single
diff -Nurp linux-4.7-rc6-aufs/fs/dcache.c linux-4.7-rc6-aufs-mod/fs/dcache.c
--- linux-4.7-rc6-aufs/fs/dcache.c	2016-07-04 19:02:29.260286196 +0300
+++ linux-4.7-rc6-aufs-mod/fs/dcache.c	2016-07-04 19:03:53.653714965 +0300
@@ -1310,6 +1310,7 @@ rename_retry:
 	seq = 1;
 	goto again;
 }
+EXPORT_SYMBOL_GPL(d_walk);
 
 /*
  * Search for at least 1 mount point in the dentry's subdirs.
diff -Nurp linux-4.7-rc6-aufs/fs/exec.c linux-4.7-rc6-aufs-mod/fs/exec.c
--- linux-4.7-rc6-aufs/fs/exec.c	2016-07-04 17:58:15.707773651 +0300
+++ linux-4.7-rc6-aufs-mod/fs/exec.c	2016-07-04 19:03:53.654714970 +0300
@@ -104,6 +104,7 @@ bool path_noexec(const struct path *path
 	return (path->mnt->mnt_flags & MNT_NOEXEC) ||
 	       (path->mnt->mnt_sb->s_iflags & SB_I_NOEXEC);
 }
+EXPORT_SYMBOL_GPL(path_noexec);
 
 #ifdef CONFIG_USELIB
 /*
diff -Nurp linux-4.7-rc6-aufs/fs/fcntl.c linux-4.7-rc6-aufs-mod/fs/fcntl.c
--- linux-4.7-rc6-aufs/fs/fcntl.c	2016-07-04 19:02:29.260286196 +0300
+++ linux-4.7-rc6-aufs-mod/fs/fcntl.c	2016-07-04 19:03:53.654714970 +0300
@@ -82,6 +82,7 @@ int setfl(int fd, struct file * filp, un
  out:
 	return error;
 }
+EXPORT_SYMBOL_GPL(setfl);
 
 static void f_modown(struct file *filp, struct pid *pid, enum pid_type type,
                      int force)
diff -Nurp linux-4.7-rc6-aufs/fs/file_table.c linux-4.7-rc6-aufs-mod/fs/file_table.c
--- linux-4.7-rc6-aufs/fs/file_table.c	2016-05-16 01:43:13.000000000 +0300
+++ linux-4.7-rc6-aufs-mod/fs/file_table.c	2016-07-04 19:03:53.654714970 +0300
@@ -147,6 +147,7 @@ over:
 	}
 	return ERR_PTR(-ENFILE);
 }
+EXPORT_SYMBOL_GPL(get_empty_filp);
 
 /**
  * alloc_file - allocate and initialize a 'struct file'
@@ -258,6 +259,7 @@ void flush_delayed_fput(void)
 {
 	delayed_fput(NULL);
 }
+EXPORT_SYMBOL_GPL(flush_delayed_fput);
 
 static DECLARE_DELAYED_WORK(delayed_fput_work, delayed_fput);
 
@@ -300,6 +302,7 @@ void __fput_sync(struct file *file)
 }
 
 EXPORT_SYMBOL(fput);
+EXPORT_SYMBOL_GPL(__fput_sync);
 
 void put_filp(struct file *file)
 {
@@ -308,6 +311,7 @@ void put_filp(struct file *file)
 		file_free(file);
 	}
 }
+EXPORT_SYMBOL_GPL(put_filp);
 
 void __init files_init(void)
 { 
diff -Nurp linux-4.7-rc6-aufs/fs/inode.c linux-4.7-rc6-aufs-mod/fs/inode.c
--- linux-4.7-rc6-aufs/fs/inode.c	2016-07-04 19:02:29.261286202 +0300
+++ linux-4.7-rc6-aufs-mod/fs/inode.c	2016-07-04 20:51:39.805168596 +0300
@@ -1600,6 +1600,7 @@ int update_time(struct inode *inode, str
 
 	return update_time(inode, time, flags);
 }
+EXPORT_SYMBOL_GPL(update_time);
 
 /**
  *	touch_atime	-	update the access time
diff -Nurp linux-4.7-rc6-aufs/fs/namespace.c linux-4.7-rc6-aufs-mod/fs/namespace.c
--- linux-4.7-rc6-aufs/fs/namespace.c	2016-07-04 17:58:15.729773645 +0300
+++ linux-4.7-rc6-aufs-mod/fs/namespace.c	2016-07-04 19:03:53.654714970 +0300
@@ -463,6 +463,7 @@ void __mnt_drop_write(struct vfsmount *m
 	mnt_dec_writers(real_mount(mnt));
 	preempt_enable();
 }
+EXPORT_SYMBOL_GPL(__mnt_drop_write);
 
 /**
  * mnt_drop_write - give up write access to a mount
@@ -1812,6 +1813,7 @@ int iterate_mounts(int (*f)(struct vfsmo
 	}
 	return 0;
 }
+EXPORT_SYMBOL_GPL(iterate_mounts);
 
 static void cleanup_group_ids(struct mount *mnt, struct mount *end)
 {
diff -Nurp linux-4.7-rc6-aufs/fs/notify/group.c linux-4.7-rc6-aufs-mod/fs/notify/group.c
--- linux-4.7-rc6-aufs/fs/notify/group.c	2016-07-04 17:58:15.742773641 +0300
+++ linux-4.7-rc6-aufs-mod/fs/notify/group.c	2016-07-04 19:03:53.655714975 +0300
@@ -22,6 +22,7 @@
 #include <linux/srcu.h>
 #include <linux/rculist.h>
 #include <linux/wait.h>
+#include <linux/module.h>
 
 #include <linux/fsnotify_backend.h>
 #include "fsnotify.h"
@@ -81,6 +82,7 @@ void fsnotify_get_group(struct fsnotify_
 {
 	atomic_inc(&group->refcnt);
 }
+EXPORT_SYMBOL_GPL(fsnotify_get_group);
 
 /*
  * Drop a reference to a group.  Free it if it's through.
@@ -90,6 +92,7 @@ void fsnotify_put_group(struct fsnotify_
 	if (atomic_dec_and_test(&group->refcnt))
 		fsnotify_final_destroy_group(group);
 }
+EXPORT_SYMBOL_GPL(fsnotify_put_group);
 
 /*
  * Create a new fsnotify_group and hold a reference for the group returned.
@@ -118,6 +121,7 @@ struct fsnotify_group *fsnotify_alloc_gr
 
 	return group;
 }
+EXPORT_SYMBOL_GPL(fsnotify_alloc_group);
 
 int fsnotify_fasync(int fd, struct file *file, int on)
 {
diff -Nurp linux-4.7-rc6-aufs/fs/notify/mark.c linux-4.7-rc6-aufs-mod/fs/notify/mark.c
--- linux-4.7-rc6-aufs/fs/notify/mark.c	2016-07-04 17:58:15.742773641 +0300
+++ linux-4.7-rc6-aufs-mod/fs/notify/mark.c	2016-07-04 19:03:53.655714975 +0300
@@ -113,6 +113,7 @@ void fsnotify_put_mark(struct fsnotify_m
 		mark->free_mark(mark);
 	}
 }
+EXPORT_SYMBOL_GPL(fsnotify_put_mark);
 
 /* Calculate mask of events for a list of marks */
 u32 fsnotify_recalc_mask(struct hlist_head *head)
@@ -230,6 +231,7 @@ void fsnotify_destroy_mark(struct fsnoti
 	mutex_unlock(&group->mark_mutex);
 	fsnotify_free_mark(mark);
 }
+EXPORT_SYMBOL_GPL(fsnotify_destroy_mark);
 
 void fsnotify_destroy_marks(struct hlist_head *head, spinlock_t *lock)
 {
@@ -415,6 +417,7 @@ err:
 
 	return ret;
 }
+EXPORT_SYMBOL_GPL(fsnotify_add_mark);
 
 int fsnotify_add_mark(struct fsnotify_mark *mark, struct fsnotify_group *group,
 		      struct inode *inode, struct vfsmount *mnt, int allow_dups)
@@ -521,6 +524,7 @@ void fsnotify_duplicate_mark(struct fsno
 	new->mask = old->mask;
 	new->free_mark = old->free_mark;
 }
+EXPORT_SYMBOL_GPL(fsnotify_init_mark);
 
 /*
  * Nothing fancy, just initialize lists and locks and counters.
diff -Nurp linux-4.7-rc6-aufs/fs/open.c linux-4.7-rc6-aufs-mod/fs/open.c
--- linux-4.7-rc6-aufs/fs/open.c	2016-07-04 17:58:15.746773640 +0300
+++ linux-4.7-rc6-aufs-mod/fs/open.c	2016-07-04 19:03:53.655714975 +0300
@@ -64,6 +64,7 @@ int do_truncate(struct dentry *dentry, l
 	inode_unlock(dentry->d_inode);
 	return ret;
 }
+EXPORT_SYMBOL_GPL(do_truncate);
 
 long vfs_truncate(const struct path *path, loff_t length)
 {
@@ -678,6 +679,7 @@ int open_check_o_direct(struct file *f)
 	}
 	return 0;
 }
+EXPORT_SYMBOL_GPL(open_check_o_direct);
 
 static int do_dentry_open(struct file *f,
 			  struct inode *inode,
diff -Nurp linux-4.7-rc6-aufs/fs/read_write.c linux-4.7-rc6-aufs-mod/fs/read_write.c
--- linux-4.7-rc6-aufs/fs/read_write.c	2016-07-04 19:02:29.262286207 +0300
+++ linux-4.7-rc6-aufs-mod/fs/read_write.c	2016-07-04 19:03:53.655714975 +0300
@@ -525,6 +525,7 @@ vfs_readf_t vfs_readf(struct file *file)
 		return new_sync_read;
 	return ERR_PTR(-ENOSYS);
 }
+EXPORT_SYMBOL_GPL(vfs_readf);
 
 vfs_writef_t vfs_writef(struct file *file)
 {
@@ -536,6 +537,7 @@ vfs_writef_t vfs_writef(struct file *fil
 		return new_sync_write;
 	return ERR_PTR(-ENOSYS);
 }
+EXPORT_SYMBOL_GPL(vfs_writef);
 
 ssize_t __kernel_write(struct file *file, const char *buf, size_t count, loff_t *pos)
 {
diff -Nurp linux-4.7-rc6-aufs/fs/splice.c linux-4.7-rc6-aufs-mod/fs/splice.c
--- linux-4.7-rc6-aufs/fs/splice.c	2016-07-04 19:02:29.262286207 +0300
+++ linux-4.7-rc6-aufs-mod/fs/splice.c	2016-07-04 19:03:53.656714979 +0300
@@ -1124,6 +1124,7 @@ long do_splice_from(struct pipe_inode_in
 
 	return splice_write(pipe, out, ppos, len, flags);
 }
+EXPORT_SYMBOL_GPL(do_splice_from);
 
 /*
  * Attempt to initiate a splice from a file to a pipe.
@@ -1153,6 +1154,7 @@ long do_splice_to(struct file *in, loff_
 
 	return splice_read(in, ppos, pipe, len, flags);
 }
+EXPORT_SYMBOL_GPL(do_splice_to);
 
 /**
  * splice_direct_to_actor - splices data directly between two non-pipes
diff -Nurp linux-4.7-rc6-aufs/fs/xattr.c linux-4.7-rc6-aufs-mod/fs/xattr.c
--- linux-4.7-rc6-aufs/fs/xattr.c	2016-07-04 17:58:15.754773638 +0300
+++ linux-4.7-rc6-aufs-mod/fs/xattr.c	2016-07-04 19:03:53.656714979 +0300
@@ -207,6 +207,7 @@ vfs_getxattr_alloc(struct dentry *dentry
 	*xattr_value = value;
 	return error;
 }
+EXPORT_SYMBOL_GPL(vfs_getxattr_alloc);
 
 ssize_t
 vfs_getxattr(struct dentry *dentry, const char *name, void *value, size_t size)
diff -Nurp linux-4.7-rc6-aufs/kernel/task_work.c linux-4.7-rc6-aufs-mod/kernel/task_work.c
--- linux-4.7-rc6-aufs/kernel/task_work.c	2016-05-16 01:43:13.000000000 +0300
+++ linux-4.7-rc6-aufs-mod/kernel/task_work.c	2016-07-04 19:03:53.656714979 +0300
@@ -118,3 +118,4 @@ void task_work_run(void)
 		} while (work);
 	}
 }
+EXPORT_SYMBOL_GPL(task_work_run);
diff -Nurp linux-4.7-rc6-aufs/security/commoncap.c linux-4.7-rc6-aufs-mod/security/commoncap.c
--- linux-4.7-rc6-aufs/security/commoncap.c	2016-07-04 17:58:15.945773585 +0300
+++ linux-4.7-rc6-aufs-mod/security/commoncap.c	2016-07-04 19:03:53.656714979 +0300
@@ -1058,12 +1058,14 @@ int cap_mmap_addr(unsigned long addr)
 	}
 	return ret;
 }
+EXPORT_SYMBOL_GPL(cap_mmap_addr);
 
 int cap_mmap_file(struct file *file, unsigned long reqprot,
 		  unsigned long prot, unsigned long flags)
 {
 	return 0;
 }
+EXPORT_SYMBOL_GPL(cap_mmap_file);
 
 #ifdef CONFIG_SECURITY
 
diff -Nurp linux-4.7-rc6-aufs/security/device_cgroup.c linux-4.7-rc6-aufs-mod/security/device_cgroup.c
--- linux-4.7-rc6-aufs/security/device_cgroup.c	2016-05-16 01:43:13.000000000 +0300
+++ linux-4.7-rc6-aufs-mod/security/device_cgroup.c	2016-07-04 19:03:53.656714979 +0300
@@ -7,6 +7,7 @@
 #include <linux/device_cgroup.h>
 #include <linux/cgroup.h>
 #include <linux/ctype.h>
+#include <linux/export.h>
 #include <linux/list.h>
 #include <linux/uaccess.h>
 #include <linux/seq_file.h>
@@ -849,6 +850,7 @@ int __devcgroup_inode_permission(struct
 	return __devcgroup_check_permission(type, imajor(inode), iminor(inode),
 			access);
 }
+EXPORT_SYMBOL_GPL(__devcgroup_inode_permission);
 
 int devcgroup_inode_mknod(int mode, dev_t dev)
 {
diff -Nurp linux-4.7-rc6-aufs/security/security.c linux-4.7-rc6-aufs-mod/security/security.c
--- linux-4.7-rc6-aufs/security/security.c	2016-07-04 17:58:15.948773584 +0300
+++ linux-4.7-rc6-aufs-mod/security/security.c	2016-07-04 19:03:53.657714984 +0300
@@ -434,6 +434,7 @@ int security_path_rmdir(const struct pat
 		return 0;
 	return call_int_hook(path_rmdir, 0, dir, dentry);
 }
+EXPORT_SYMBOL_GPL(security_path_rmdir);
 
 int security_path_unlink(const struct path *dir, struct dentry *dentry)
 {
@@ -450,6 +451,7 @@ int security_path_symlink(const struct p
 		return 0;
 	return call_int_hook(path_symlink, 0, dir, dentry, old_name);
 }
+EXPORT_SYMBOL_GPL(security_path_symlink);
 
 int security_path_link(struct dentry *old_dentry, const struct path *new_dir,
 		       struct dentry *new_dentry)
@@ -458,6 +460,7 @@ int security_path_link(struct dentry *ol
 		return 0;
 	return call_int_hook(path_link, 0, old_dentry, new_dir, new_dentry);
 }
+EXPORT_SYMBOL_GPL(security_path_link);
 
 int security_path_rename(const struct path *old_dir, struct dentry *old_dentry,
 			 const struct path *new_dir, struct dentry *new_dentry,
@@ -485,6 +488,7 @@ int security_path_truncate(const struct
 		return 0;
 	return call_int_hook(path_truncate, 0, path);
 }
+EXPORT_SYMBOL_GPL(security_path_truncate);
 
 int security_path_chmod(const struct path *path, umode_t mode)
 {
@@ -492,6 +496,7 @@ int security_path_chmod(const struct pat
 		return 0;
 	return call_int_hook(path_chmod, 0, path, mode);
 }
+EXPORT_SYMBOL_GPL(security_path_chmod);
 
 int security_path_chown(const struct path *path, kuid_t uid, kgid_t gid)
 {
@@ -499,6 +504,7 @@ int security_path_chown(const struct pat
 		return 0;
 	return call_int_hook(path_chown, 0, path, uid, gid);
 }
+EXPORT_SYMBOL_GPL(security_path_chown);
 
 int security_path_chroot(const struct path *path)
 {
@@ -584,6 +590,7 @@ int security_inode_readlink(struct dentr
 		return 0;
 	return call_int_hook(inode_readlink, 0, dentry);
 }
+EXPORT_SYMBOL_GPL(security_inode_readlink);
 
 int security_inode_follow_link(struct dentry *dentry, struct inode *inode,
 			       bool rcu)
@@ -599,6 +606,7 @@ int security_inode_permission(struct ino
 		return 0;
 	return call_int_hook(inode_permission, 0, inode, mask);
 }
+EXPORT_SYMBOL_GPL(security_inode_permission);
 
 int security_inode_setattr(struct dentry *dentry, struct iattr *attr)
 {
@@ -737,6 +745,7 @@ int security_file_permission(struct file
 
 	return fsnotify_perm(file, mask);
 }
+EXPORT_SYMBOL_GPL(security_file_permission);
 
 int security_file_alloc(struct file *file)
 {
@@ -796,6 +805,7 @@ int security_mmap_file(struct file *file
 		return ret;
 	return ima_file_mmap(file, prot);
 }
+EXPORT_SYMBOL_GPL(security_mmap_file);
 
 int security_mmap_addr(unsigned long addr)
 {
